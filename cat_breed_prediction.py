# -*- coding: utf-8 -*-
"""35_Viona_Final_Cat_Breed_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10BosgfCc7bea7L9rfRq1mE9DiV0M4VGk
"""

# Import libraries
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

# Define the cat classes
categories = ['Abyssinian', 'Bengal', 'British_Shorthair', 'Maine_Coon', 'Persian', 'Ragdoll', 'Russian_Blue', 'Siamese', 'Sphynx']
categories_count = [90, 100, 82, 84, 99, 82, 80, 84, 78]

# Create a bar plot
plt.figure(figsize=(14, 6))
plt.bar(categories, categories_count)
plt.title('Classes')
plt.xlabel('Labels')
plt.ylabel('Counts')
plt.show()

# Define the directory to the dataset
data_dir = 'cat-dataset'

# Preprocess the data

#  Resize the images to a specified size
#  Convert the color channels to RGB, 

img_size = 224
data = []
for category in categories:
    path = os.path.join(data_dir, category)
    class_num = categories.index(category)
    for img in os.listdir(path):
        print(img)
        try:
            img_arr = cv2.imread(os.path.join(path, img))
            img_arr = cv2.resize(img_arr, (img_size, img_size))
            img_arr = cv2.cvtColor(img_arr, cv2.COLOR_BGR2RGB)
            data.append([img_arr, class_num])
        except Exception as e:
            pass

# Normalize the data

# Shuffle, split and normalize the preprocessed data into training and testing sets

np.random.shuffle(data)
X = []
y = []
for features, label in data:
    X.append(features)
    y.append(label)
X = np.array(X).reshape(-1, img_size, img_size, 3)
y = np.array(y)
X = X / 255.0

split = int(0.8 * len(X))
X_train = X[:split]
y_train = y[:split]
X_test = X[split:]
y_test = y[split:]

# Define the model architecture

# Define a convolutional neural network (CNN) model using the Keras API of TensorFlow

model = keras.Sequential([
    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=X_train.shape[1:]),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Conv2D(64, (3,3), activation='relu'),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Conv2D(128, (3,3), activation='relu'),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(len(categories), activation='softmax')
])

# Compile the model

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print('Test accuracy:', test_acc)

# Make predictions

# Display the top predicted category for the first 10 images in the test data (X_test)
# Set the plot title of predicted category with the highest probability using np.argmax

predictions = model.predict(X_test)
for i in range(10):
    plt.imshow(X_test[i])
    plt.title(categories[np.argmax(predictions[i])])
    plt.show()

# Load new image
new_image = cv2.imread('cat4.jpeg')

# Preprocess new image
new_image = cv2.resize(new_image, (img_size, img_size))
new_image = cv2.cvtColor(new_image, cv2.COLOR_BGR2RGB)
new_image = new_image / 255.0
new_image = np.reshape(new_image, (1, img_size, img_size, 3))

# Use the model to predict the cat species
prediction = model.predict(new_image)
cat_species = categories[np.argmax(prediction[0])]

print('Predicted cat species: ' + cat_species)

# plt.imshow(X_test[0])
# plt.title('Predicted cat species: ' + cat_species)
# plt.show()